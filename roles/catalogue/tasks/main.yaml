


- name: create roboshop user
  ansible.builtin.user:
    name: roboshop
    shell: /sbin/nologin
    system: true
    home: /app

- name: create app directory
  ansible.builtin.file:
    path: /app
    state: directory
    
- name: download the catalogue code
  ansible.builtin.get_url:
    url: https://roboshop-artifacts.s3.amazonaws.com/catalogue-v3.zip 
    dest: /tmp/catalogue.zip

# this module thinks file exists on ansible control server, need to extract on remote server
# here we are alraedy download the file on the remote server
- name: extract the  catalogue files 
  ansible.builtin.unarchive:
    src: /tmp/catalogue.zip
    dest: /app
    remote_src: yes

- name: install dependies
  community.general.npm:
    path: /app

- name: copy catalogue service to system directory
  ansible.builtin.copy:
    src: catalogue.service
    dest: /etc/systemd/system/catalogue.service

- name: reaload the catalogue service
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: start and enable the catalogue component
  ansible.builtin.service:
    name: catalogue
    state: started
    enabled: yes

- name: copy mongodb repo
  ansible.builtin.copy:
    src: mongo.repo
    dest: /etc/yum.repos.d/mongo.repo
- name: install mongodb client
  ansible.builtin.dnf:
    name: mongodb-mongosh
    state: present

- name: checks the products loaded or not if loaded nio need of above one
  ansible.builtin.command: mongosh --host mongodb.lakshmireddy.site --eval 'db.getMongo().getDBNames().indexOf("catalogue")'
  register: catalogue_output
  # ignore_errors: true

- name: print catalogue output
  ansible.builtin.debug:
    msg: "{{ catalogue_output }}"
  # ignore_errors: true
  # ignore_unreachable: true


- name: load products
  ansible.builtin.shell: mongosh --host mongodb.lakshmireddy.site </app/db/master-data.js 
  #when: catalogue_output.stdout < 0
  when: catalogue_output.stdout | int < 0
  # ignore_errors: true
  # ignore_unreachable: true

- name: systemd setup
  include_role:
    name: common
    tasks_from: systemd.yaml

- name: app setup
  tags:
  - deployment
  import_role:
    name: common
    tasks_from: deployment.yaml

